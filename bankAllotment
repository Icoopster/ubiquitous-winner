
//
console.log('');

//copied code for importing file
const fs = require("fs");
const readline = require("readline");
//read stream that uses local example.csv title 
const stream = fs.createReadStream("./example.csv");
const reader = readline.createInterface({input: stream});

//establish variables
// data is an array for holding incoming csv
let data = [];
// proceeding 3 vars are for sorting respective spending
var shopping = 0;
let dataShopping = ["AMAZON", "AMZN", "KLARNA", "AFTERPAY", "MICHAELS", "TARGET", "NAVY", "BARNES"];
var subs = 0;
let dataSubs = ["NETFLIX", "WATER","WUNC", "NYTIMES", "DISNEY", "APPLE", "PEACOCK"];
var food = 0;
let dataFood = ["PANERA", "FUQUA", "CHICK-FIL-A", "WHOLEFDS", "HACIENDA", "TOKYO", "FOOD", "LOCOPOPS", "ENZOS", "POKEWORKS"  ]
var other = 0;

reader. on("line", row => {
    // this is splitter
    data.push(row.split(","));
});

// when reader finishes a csv
reader.on("close", () => {
    // next line was to see if data was being populated
    //console.log(data);
    // for loop through data adding values to respective spending variables 
    for (let n = 1; n < data.length;n++){
        //console.log(data[n][2]);
        shopping = (iterateDataSets(data[n][2], data[n][3],dataShopping,shopping));
        //console.log("Shopping = " + shopping);
        subs = (iterateDataSets(data[n][2], data[n][3],dataSubs,subs));
        //console.log("subs " +subs);
        food = (iterateDataSets(data[n][2],data[n][3],dataFood,food));
        // food variable
        other += parseInt(data[n][3]);
    }

    // output variable counts
    console.log("Shopping = " + shopping);
    console.log("Food = " +food);
    console.log("Subscriptions = " +subs);
    console.log("Other = " +other);
});

function iterateDataSets(dataActivelySearching, dataActivelyCost, dataSet, spendingVar) {
    for (let x = 0; x < dataSet.length;x++)
    {
        //console.log(dataActivelySearching,dataActivelyCost, dataSet);
        if (dataActivelySearching.includes(dataSet[x])){
            console.log(dataSet[x] + " : " + dataActivelyCost)
            spendingVar += parseInt(dataActivelyCost);
            return spendingVar;
            break;
        }     
        
    }
    return spendingVar;

}

